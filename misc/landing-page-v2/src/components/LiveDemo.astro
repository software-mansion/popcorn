---
import Button, { buttonGroupClass } from "./Button.astro";
import Section, { fullWidthClass } from "./Section.astro";
import LeadingElement from "./LeadingElement.astro";
---

<Section id="live-demo" background="light">
    <h1
        class:list={[
            "text-[200px] font-handjet text-center font-semibold tracking-normal leading-none text-orange-100",
            fullWidthClass,
        ]}
    >
        Check out how simple it is to use Popcorn’s API
    </h1>
    <LeadingElement title="Live demo" color="light" />

    <div class="flex justify-between gap-20 items-center">
        <div class="max-w-96">
            <p>
                Elixir meets browser. Magic happens. This live demo showcases
                Popcorn's intuitive API – where functional programming
                principles create beautiful, interactive web experiences. Click
                around, modify the code, and discover why developers are falling
                in love with Elixir on the frontend.
            </p>
            <div class={buttonGroupClass}>
                <Button
                    title="Read the docs"
                    type="primary"
                    href="#"
                    newTab={true}
                />
                <Button
                    title="See the repo"
                    type="secondary"
                    href="https://github.com/software-mansion/popcorn/"
                    newTab={true}
                />
            </div>
        </div>
        <div class="flex flex-col gap-4">
            <div
                id="terminal"
                class="border-orange-100 border w-xl h-80 overflow-auto live-demo-scroll"
            >
            </div>
            <div class="flex flex-col gap-2">
                <a
                    id="live-simple"
                    class="border-orange-100 border text-center p-1"
                    >Example: sort</a
                >
                <a
                    id="live-case"
                    class="border-orange-100 border text-center p-1"
                    >Example: processes</a
                >
            </div>
        </div>
    </div>
</Section>
<script>
    import { Terminal } from "@xterm/xterm";
    import { FitAddon } from "@xterm/addon-fit";

    const popcorn = await Popcorn.init({
        debug: true,
        onStdout: (text) => displayLog(text, { term, isError: false }),
        onStderr: (text) => displayLog(text, { term, isError: true }),
    });

    const term = new Terminal({
        allowTransparency: true,
        theme: {
            background: "#fffdf5",
            foreground: "#36220d",
            cursor: "#ef7c00",
            cursorAccent: "#ef7c00",
            selectionBackground: "#ffe6cc",
        },
    });
    const fitAddon = new FitAddon();
    term.loadAddon(fitAddon);
    window.terminal = term;
    term.open(document.getElementById("terminal"));
    fitAddon.fit();

    term.onKey(async (key) => {
        const ARROW_UP_KEY_CODE = 38;
        const ARROW_DOWN_KEY_CODE = 40;
        let text = key.key;
        const keyCode = key.domEvent.keyCode;
        if (keyCode === ARROW_UP_KEY_CODE || keyCode === ARROW_DOWN_KEY_CODE) {
            text = "";
        }
        try {
            await write(text);
        } catch (error) {
            displayLog(error, { term, isError: true });
        }
    });

    document
        .getElementById("live-simple")
        ?.addEventListener("click", async () => {
            const textArea = document.querySelector(".xterm-helper-textarea");
            if (textArea === null) return;

            await write("Enum.sort([3, 2, 1])");
            enter(textArea);
        });
    document
        .getElementById("live-case")
        ?.addEventListener("click", async () => {
            const textArea = document.querySelector(".xterm-helper-textarea");
            if (textArea === null) return;

            const lines = [
                "hi = fn -> IO.inspect(self()) end",
                "Enum.each(0..3, fn _ -> spawn(hi) end)",
            ];

            for (const line of lines) {
                await write(line);
                enter(textArea);
            }
        });

    function displayLog(log, { term, isError }) {
        const lineElement = document.createElement("span");
        lineElement.textContent = log;
        if (isError) {
            log = "\x1b[31m" + log + "\x1b[0m\n\r";
        }
        term.write(log);
    }

    async function write(text) {
        await popcorn.call(
            {
                command: "code_data",
                language: "elixir",
                text,
            },
            {
                timeoutMs: 10_000,
            },
        );
    }

    function enter(textArea) {
        const keyboardEvent = new KeyboardEvent("keydown", {
            code: "Enter",
            key: "Enter",
            charCode: 13,
            keyCode: 13,
            view: window,
        });

        textArea.dispatchEvent(keyboardEvent);
    }
</script>

<style>
    .live-demo-scroll {
        scrollbar-color: #ef7c00 #fffdf5;
    }
</style>
