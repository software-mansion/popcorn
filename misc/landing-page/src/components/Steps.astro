---
import Step from "./Step.astro";
import Section from "./Section.astro";
---

<Section
  id="features"
  background="light"
  class="gap-20 md:gap-36"
>
  <Step n="01">
    <Fragment slot="header-title">Elixir, meet <br /> WebAssembly.</Fragment>
    <Fragment slot="title">Compile your Elixir to Wasm.</Fragment>
    <Fragment slot="description">
      Popcorn bridges your Elixir code with Wasm-compiled AtomVM runtime. No
      need to learn a new language – just use the one you already love.
    </Fragment>
  </Step>
  <Step n="02">
    <Fragment slot="header-title">Your code <br /> is great.</Fragment>
    <Fragment slot="title">Use your existing code without any changes.</Fragment
    >
    <Fragment slot="description"
      >With Popcorn, you don’t need to rewrite or refactor your code. It runs
      plain Elixir as-is (including OTP patterns and supervision trees) right
      inside the browser.
    </Fragment>
  </Step>
  <Step n="03">
    <Fragment slot="header-title">No internet? <br /> No problem.</Fragment>
    <Fragment slot="title">Run everything in the browser</Fragment>
    <Fragment slot="description"
      >Popcorn runs fully in-browser, which makes it ideal for many use cases,
      like offline, local-first applications. No servers or internet connection
      required.</Fragment
    >
  </Step>
  <Step n="04">
    <Fragment slot="header-title">Built for <br /> stability.</Fragment>
    <Fragment slot="title">Don’t worry about the performance.</Fragment>
    <Fragment slot="description"
      >Compared to AtomVM, Popcorn enhances Elixir-JavaScript communication,
      reduces the number of crashes, and improves memory handling for your app
      to run smoothly.</Fragment
    >
  </Step>
</Section>

<script>
  import { setupStepVisibility } from "../utils/stepAnimation";

  function setup() {
    const steps = [...document.querySelectorAll<HTMLElement>("[data-step]")];

    const stepElements = steps.map((step) => ({
      number: step.querySelector<HTMLElement>(".number")!,
      headerTitle: step.querySelector<HTMLElement>(".header-title")!,
      title: step.querySelector<HTMLElement>(".title")!,
      description: step.querySelector<HTMLElement>(".description")!,
      break: step.querySelector<HTMLElement>(".break")!,
    }));

    setupStepVisibility({
      sectionSelector: "#features",
      stepSelector: "[data-step]",
      onUpdate: (step, nextStep, scale, { currentStep }) => {
        const contentOpacity = scale * 3;
        const numberOpacity = scale;

        stepElements[currentStep].number.style.opacity = String(numberOpacity);
        stepElements[currentStep + 1].number.style.opacity = String(
          1 - numberOpacity,
        );

        // Content group (shorter animation)
        (["headerTitle", "title", "description", "break"] as const).forEach(
          (key) => {
            stepElements[currentStep][key].style.opacity =
              String(contentOpacity);
            stepElements[currentStep + 1][key].style.opacity = String(
              1 - contentOpacity,
            );
          },
        );
      },
      duration: 700,
    });
  }

  document.addEventListener("DOMContentLoaded", setup);
  document.addEventListener("astro:page-load", setup);
</script>
