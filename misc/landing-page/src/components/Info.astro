---
import Section from "./Section.astro";
---

<Section
  id="info"
  background="dark"
  class="text-brown-60 relative mt-50 mb-50 flex h-[2000px] max-w-3xl flex-col gap-4 text-2xl font-bold md:text-4xl"
>
  <div id="info-content" class="fixed-position mb-12 flex flex-col gap-4">
    <p>
      Popcorn is open-source and licensed under <a
        target="_blank"
        rel="noopener noreferrer"
        href="https://github.com/software-mansion/popcorn/blob/main/LICENSE"
        class="underline">Apache 2.0</a
      >. You’re free to use it in personal and commercial projects.
    </p>
    <p>
      Need help with something bigger? We’re <a
        target="_blank"
        rel="noopener noreferrer"
        href="https://swmansion.com"
        class="underline">Software Mansion</a
      > – a software development company, React Native core contributors, and Elixir
      experts. Get in touch and let’s build your product together.
    </p>
  </div>
</Section>

<script>
  interface Elements {
    section: HTMLElement;
    contentSection: HTMLElement;
  }

  function setupSplitText(elements: Elements) {
    const { contentSection } = elements;

    const paragraphs = [...contentSection.querySelectorAll("p")];

    contentSection.innerHTML = ""; // Clear existing content

    paragraphs.forEach((p) => {
      const splitText = [...p.childNodes]
        .map((node) => {
          if (node.nodeType === Node.TEXT_NODE) {
            return (
              node.textContent
                ?.split(/\s+/)
                .filter((word) => word.trim() !== "") || []
            );
          }

          return node;
        })
        .flat();

      const paragraph = document.createElement("p");

      splitText.forEach((word, i) => {
        const span = document.createElement("span");
        span.className = "text-scroll transition-colors duration-300";

        if (typeof word === "object" && word.nodeType) {
          span.appendChild(word);
        } else {
          
          const previous = i - 1 >= 0 ? splitText[i - 1] : undefined;
          const isCurrentPunctuation = /^[.,;:!?]$/.test(String(word));
          const previousWasNode =
            typeof previous === "object" && previous.nodeType;

          const shouldPrependSpace = previousWasNode && !isCurrentPunctuation;

          span.textContent =
            (shouldPrependSpace ? " " : "") + String(word) + " ";
        }

        paragraph.appendChild(span);
      });

      contentSection.appendChild(paragraph);
    });
  }

  function setupScrollAnimation(elements: Elements) {
    const { section, contentSection } = elements;

    contentSection.style.top = `calc(50% - ${contentSection.clientHeight / 2}px)`;

    const words = contentSection.querySelectorAll(".text-scroll");

    const navElement = document.querySelector("nav")!;
    const navHeight = navElement ? navElement.offsetHeight : 64;
    const scrollOffset = 200;
    const visibleThreshold = 0.7;

    const sectionHeight = section.clientHeight;
    const contentHeight = contentSection.clientHeight;
    const totalWords = words.length;
    const scrollPerWord = sectionHeight / totalWords;

    let lastTargetIndex = 0;
    let ticking = false;

    function handleScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          const sectionRect = section.getBoundingClientRect();
          const sectionTopPosition =
            -1 * (sectionRect.top - scrollOffset - navHeight) +
            contentHeight * visibleThreshold;

          // Calculate which word should be colored based on scroll position
          const targetIndex = Math.max(
            Math.min(
              Math.floor(sectionTopPosition / scrollPerWord),
              totalWords - 1,
            ),
            0,
          );

          if (targetIndex !== lastTargetIndex) {
            // scrolling down
            if (targetIndex > lastTargetIndex) {
              for (let i = lastTargetIndex; i <= targetIndex; i++) {
                words[i].classList.add("text-light-20");
              }
            }
            //scrolling up
            else {
              for (let i = targetIndex; i <= lastTargetIndex; i++) {
                words[i].classList.remove("text-light-20");
              }
            }

            lastTargetIndex = targetIndex;
          }

          ticking = false;
        });

        ticking = true;
      }
    }

    handleScroll();
    window.addEventListener("scroll", handleScroll);
  }

  function setup() {
    const section = document.querySelector<HTMLElement>("#info")!;
    const contentSection =
      document.querySelector<HTMLElement>("#info-content")!;

    const elements = {
      section,
      contentSection,
    };

    setupSplitText(elements);
    setupScrollAnimation(elements);
  }

  document.addEventListener("DOMContentLoaded", setup);
  document.addEventListener("astro:page-load", setup);
</script>

<style>
  .fixed-position {
    position: sticky;
    z-index: 10;
  }
</style>
