---
import { Icon } from "astro-icon/components";

const linkClass = "transition-colors duration-300 hover:text-orange-100";
const openNewTab = { target: "_blank", rel: "noopener noreferrer" };
---

<nav
  class="fixed top-0 right-0 left-0 flex h-16 min-w-max items-center justify-between gap-8 px-4 pt-3 pb-3 text-black backdrop-blur-xs transition-colors duration-300 lg:bg-transparent"
>
  <a href="/" class="flex-shrink-0">
    <Icon
      name="logo-text"
      class="lg:text-brown-header text-4xl transition-colors duration-300"
      data-logo
    />
  </a>
  <div class="hidden gap-4 lg:flex">
    <a class={linkClass} href="#features">Features</a>
    <a class={linkClass} href="#examples">Examples</a>
    <a class={linkClass} href="#live-demo">Live demo</a>
    <a class={linkClass} href="#outtro">Contact us</a>
  </div>
  <div class="hidden gap-4 lg:flex">
    <a class={linkClass} {...openNewTab} href="/docs/">Documentation →</a>
    <a
      class={linkClass}
      {...openNewTab}
      href="https://github.com/software-mansion/popcorn/">Github →</a
    >
  </div>
  <button
    class="flex h-6 w-6 flex-col items-center justify-center gap-1 lg:hidden"
    data-mobile-menu-toggle
    aria-label="Toggle mobile menu"
  >
    <Icon
      name="hamburger"
      class="text-brown-header text-2xl transition-colors duration-300"
      data-hamburger-icon
    />
    <Icon
      name="close"
      class="text-light-20 hidden text-2xl transition-colors duration-300"
      data-close-icon
    />
  </button>
</nav>

<nav
  class="bg-brown-70 fixed top-0 z-50 h-full w-full -translate-y-full transform transition-transform duration-300 lg:hidden"
  data-mobile-menu
>
  <div class="text-light-20 mt-5 flex flex-col p-4">
    <div class="flex flex-col gap-10">
      <a href="#features">Features</a>
      <a href="#examples">Examples</a>
      <a href="#live-demo">Live demo</a>
      <a href="#outtro">Contact us</a>
    </div>
    <hr class="my-11.5" />
    <div class="flex flex-col gap-10">
      <a href="/docs/">Documentation →</a>
      <a href="https://github.com/software-mansion/popcorn/">Github →</a>
    </div>
  </div>
</nav>

<script>
  function setupHeaderColorChange() {
    const header = document.querySelector("nav")!;
    const logo = header.querySelector("[data-logo]");
    const links = header.querySelectorAll("a");

    // Mobile menu elements
    const menuToggle = document.querySelector("[data-mobile-menu-toggle]")!;
    const mobileMenu = document.querySelector("[data-mobile-menu]")!;
    const mobileLinks = mobileMenu.querySelectorAll("a");
    const hamburgerIcon = document.querySelector("[data-hamburger-icon]");
    const closeIcon = document.querySelector("[data-close-icon]");

    let isOpen = false;

    const closeMenu = () => {
      mobileMenu.classList.add("-translate-y-full");
      hamburgerIcon?.classList.remove("hidden");
      closeIcon?.classList.add("hidden");

      mobileMenu.classList.remove("top-16");
      header.classList.remove("bg-brown-70");
      logo?.classList.remove("text-light-20");
    };

    const openMenu = () => {
      mobileMenu.classList.remove("-translate-y-full");
      hamburgerIcon?.classList.add("hidden");
      closeIcon?.classList.remove("hidden");

      mobileMenu.classList.add("top-16");
      header.classList.add("bg-brown-70");
      logo?.classList.add("text-light-20");
    };

    function toggleMenu() {
      isOpen = !isOpen;

      if (isOpen) {
        // Open menu
        openMenu();
      } else {
        // Close menu
        closeMenu();
      }
    }

    menuToggle.addEventListener("click", toggleMenu);
    mobileLinks.forEach((link) => {
      link.addEventListener("click", () => {
        isOpen = false;
        closeMenu();
      });
    });

    function swapTextColor() {
      const headerRect = header.getBoundingClientRect();
      const headerCenter = {
        x: headerRect.left + headerRect.width / 2,
        y: headerRect.top + headerRect.height / 2,
      };

      // Temporarily hide header to check what's behind it
      header.style.pointerEvents = "none";
      const elementBehind = document.elementFromPoint(
        headerCenter.x,
        headerCenter.y,
      );
      header.style.pointerEvents = "";

      if (!elementBehind) return;

      // Check if we're over a dark section
      const isDarkSection: boolean = !!elementBehind.closest(
        '[data-background="dark"]',
      );

      // Toggle classes based on background
      header.classList.toggle("text-orange-100", isDarkSection);
      logo?.classList.toggle("text-orange-100", isDarkSection);
      hamburgerIcon?.classList.toggle("text-orange-100", isDarkSection);

      // Apply classes to links
      for (const link of links) {
        link.classList.toggle("text-orange-100", isDarkSection);
        link.classList.toggle("hover:text-orange-100", !isDarkSection);
        link.classList.toggle("hover:text-light-20", isDarkSection);
      }
    }

    // Throttled scroll handler for performance
    let ticking = false;
    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          swapTextColor();
          ticking = false;
        });
        ticking = true;
      }
    }

    // Set up event listeners
    window.addEventListener("scroll", onScroll, { passive: true });
    window.addEventListener("resize", swapTextColor, {
      passive: true,
    });

    // Initial check
    swapTextColor();
  }

  document.addEventListener("DOMContentLoaded", setupHeaderColorChange);
  document.addEventListener("astro:page-load", setupHeaderColorChange);
</script>
