---
interface Props {
  background: "light" | "dark";
  class?: string;
  id?: string;
}
const { background, class: className, id, ...rest } = Astro.props;

const light = "bg-light-20 text-brown-100";
const dark = "bg-brown-90 text-white";

const backgroundClass = background === "light" ? light : dark;
---

<div
  class:list={["section-bg flex flex-col", background]}
  data-background={background}
  {...rest}
>
  <section
    {...{ id }}
    class:list={[
      "font-inter my-44 mr-4 ml-4 flex scroll-mt-20 flex-col items-center md:mr-20 md:ml-20 lg:my-80 lg:mr-48 lg:ml-48",
      className ?? "",
    ]}
  >
    <slot />
  </section>
</div>

<style>
  @reference "../styles/global.css";

  .light {
    @apply bg-light-20 text-brown-100;
  }

  .dark {
    @apply bg-brown-90 text-white;
  }
</style>

<script>
  function setupSectionAnimation() {
    // skip first section as it is the header
    const sections = [
      ...document.querySelectorAll<HTMLElement>(".section-bg"),
    ].slice(1);

    let ticking = false;

    function updateSectionVisibility(sectionIndex: number) {
      const section = sections[sectionIndex];
      const nextSection = sections.slice(sectionIndex + 1).find((section) => {
        return section.offsetHeight > 0;
      });

      if (!nextSection) {
        return;
      }

      const sectionBackground = section.dataset.background;

      const rect = section.getBoundingClientRect();

      const isBottomVisible = rect.bottom - window.innerHeight < 0;

      const windowHeight = window.innerHeight * 0.35;

      if (!isBottomVisible || section.offsetHeight === 0) {
        return;
      }

      const progress = Math.max(
        Math.min((rect.bottom - windowHeight) / windowHeight, 1),
        0,
      );

      if (nextSection.dataset.background === sectionBackground) {
        return;
      }

      const fromColor =
        sectionBackground === "light"
          ? "var(--color-light-20)"
          : "var(--color-brown-90)";
      const toColor =
        sectionBackground === "light"
          ? "var(--color-brown-90)"
          : "var(--color-light-20)";

      section.dataset.progress = progress.toString();
      section.style.backgroundColor = `color-mix(in oklab, ${fromColor} ${Math.round(progress * 100)}%, ${toColor})`;

      nextSection.dataset.progress = (1 - progress).toString();
      nextSection.style.backgroundColor = `color-mix(in oklab, ${toColor} ${Math.round((1 - progress) * 100)}%, ${fromColor})`;
    }

    function handleScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          sections.forEach((_, i) => {
            updateSectionVisibility(i);
          });

          ticking = false;
        });

        ticking = true;
      }
    }

    handleScroll();
    window.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleScroll);
  }

  function setup() {
    setupSectionAnimation();
  }

  document.addEventListener("DOMContentLoaded", setup);
  document.addEventListener("astro:page-load", setup);
</script>
