---
import Button, { buttonGroupClass } from "./Button.astro";
import Section, { fullWidthClass } from "./Section.astro";
import LeadingElement from "./LeadingElement.astro";
import HeaderTitle from "./HeaderTitle.astro";
---

<Section id="live-demo" background="light" class="hidden lg:flex">
  <HeaderTitle class={fullWidthClass}>
    Check out how simple it is to use Popcorn.
  </HeaderTitle>
  <LeadingElement title="Live demo" color="light" />

  <div class="flex items-center justify-between gap-20">
    <div class="max-w-96">
      <p>
        This live demo showcases Elixir’s IEx – running right here in the
        browser. Write your own code and make it happen, or click on the buttons
        to run examples that we’ve prepared for you.
      </p>
      <div class={buttonGroupClass}>
        <Button title="Read the docs" type="primary" href="#" newTab={true} />
        <Button
          title="See the repo"
          type="secondary"
          href="https://github.com/software-mansion/popcorn/"
          newTab={true}
        />
      </div>
    </div>
    <div class="flex flex-col gap-4">
      <div
        id="terminal"
        class="live-demo-scroll h-80 w-xl overflow-auto border border-orange-100"
      >
      </div>
      <div class="flex flex-col gap-2">
        <a id="live-simple" class="border border-orange-100 p-1 text-center"
          >Example: sort</a
        >
        <a id="live-case" class="border border-orange-100 p-1 text-center"
          >Example: processes</a
        >
      </div>
    </div>
  </div>
</Section>

<script>
  import { Terminal } from "@xterm/xterm";
  import { FitAddon } from "@xterm/addon-fit";

  const XTERM_CONFIG = {
    allowTransparency: true,
    theme: {
      background: "#fffdf5",
      foreground: "#36220d",
      cursor: "#ef7c00",
      cursorAccent: "#ef7c00",
      selectionBackground: "#ffe6cc",
    },
  };

  const EXAMPLES = [
    { id: "live-simple", lines: ["Enum.sort([3, 2, 1])"] },
    {
      id: "live-case",
      lines: [
        "hi = fn -> IO.inspect(self()) end",
        "Enum.each(0..3, fn _ -> spawn(hi) end)",
      ],
    },
  ];

  async function main() {
    const terminalContainer = document.getElementById("terminal");
    if (terminalContainer === null) {
      throw new Error("Terminal container not found");
    }
    const { term, write } = xtermInit({
      container: terminalContainer,
    });

    const POPCORN_CONFIG = {
      bundlePath: "wasm/iex.avm",
      debug: true,
      onStdout: (text: string) => displayLog(text, { term, isError: false }),
      onStderr: (text: string) => displayLog(text, { term, isError: true }),
    };
    const popcorn = await Popcorn.init(POPCORN_CONFIG);

    term.onKey(async (event: any) => {
      if (isUpOrDownArrowKeyEvent(event)) {
        return;
      }
      let key = event.key as string;
      try {
        await write([key], popcorn, { withEnter: false });
      } catch (error) {
        displayLog(error as string, { term, isError: true });
      }
    });

    for (const { id, lines } of EXAMPLES) {
      const node = document.getElementById(id);
      if (node === null) {
        throw new Error(`Element with ID ${id} not found`);
      }

      node.addEventListener("click", async () => {
        await write(lines, popcorn);
      });
    }
    return term;
  }

  function displayLog(log: string, { term, isError }) {
    const lineElement = document.createElement("span");
    lineElement.textContent = log;
    if (isError) {
      log = "\x1b[31m" + log + "\x1b[0m\n\r";
    }
    term.write(log);
  }

  type XtermOpts = { container: HTMLElement };
  function xtermInit({ container }: XtermOpts) {
    const term = new Terminal(XTERM_CONFIG);
    const fitAddon = new FitAddon();
    term.loadAddon(fitAddon);
    term.open(container);
    fitAddon.fit();

    async function write(
      lines: string[],
      popcorn: any,
      { withEnter = true } = {},
    ) {
      const ENTER_EVENT = {
        code: "Enter",
        key: "Enter",
        charCode: 13,
        keyCode: 13,
        view: window,
      };

      const textArea = document.querySelector(".xterm-helper-textarea");
      if (textArea === null) throw new Error("Terminal not initialized");

      for (const line of lines) {
        await popcorn.call(
          { command: "code_data", language: "elixir", text: line },
          { timeoutMs: 10_000 },
        );
        if (!withEnter) {
          continue;
        }
        const keyboardEvent = new KeyboardEvent("keydown", ENTER_EVENT);
        textArea.dispatchEvent(keyboardEvent);
      }
    }

    return { term, write };
  }

  function isUpOrDownArrowKeyEvent(event: any) {
    const keycode = event.domEvent.keyCode;
    const ARROW_UP_KEY_CODE = 38;
    const ARROW_DOWN_KEY_CODE = 40;

    return [ARROW_UP_KEY_CODE, ARROW_DOWN_KEY_CODE].includes(keycode);
  }

  // Entrypoint
  const term = await main();
  window.terminal = term;
</script>

<style>
  .live-demo-scroll {
    scrollbar-color: #ef7c00 #fffdf5;
  }
</style>
